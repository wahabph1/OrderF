// Frontend/src/components/OrderTable.jsx

import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import OrderForm from './OrderForm'; 
import EditOrderModal from './EditOrderModal'; 

// ðŸ”‘ FIX: API URL aapke backend URL https://order-b.vercel.app se connect kiya gaya hai
const API_URL = 'https://order-b.vercel.app/api/orders';
const ownerOptions = ['All', 'Emirate Essentials', 'Ahsan', 'Habibi Tools']; 
const DEBOUNCE_DELAY = 300; 

function OrderTable() {
Â  Â  const [orders, setOrders] = useState([]);
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  const [filterOwner, setFilterOwner] = useState('All'); 
Â  Â  const [searchTerm, setSearchTerm] = useState('');
Â  Â  const [isEditing, setIsEditing] = useState(false);
Â  Â  const [currentOrder, setCurrentOrder] = useState(null);

Â  Â  const fetchOrders = useCallback(async () => {
Â  Â  Â  Â  setLoading(true); 
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  
Â  Â  Â  Â  let url = API_URL;
Â  Â  Â  Â  const queryParams = [];
Â  Â  Â  Â  
Â  Â  Â  Â  if (filterOwner !== 'All') {
Â  Â  Â  Â  Â  Â  queryParams.push(`owner=${filterOwner}`);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  if (searchTerm) {
Â  Â  Â  Â  Â  Â  queryParams.push(`search=${searchTerm}`); 
Â  Â  Â  Â  }

Â  Â  Â  Â  if (queryParams.length > 0) {
Â  Â  Â  Â  Â  Â  url = `${API_URL}?${queryParams.join('&')}`;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const response = await axios.get(url);
Â  Â  Â  Â  Â  Â  const sortedOrders = response.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
Â  Â  Â  Â  Â  Â  setOrders(sortedOrders);
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  setError('Failed to fetch orders from server. Check if backend is running.');
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  Â  console.error('Fetch error:', err);
Â  Â  Â  Â  }
Â  Â  }, [filterOwner, searchTerm]);

Â  Â  const handleDelete = async (id, serialNumber) => {
Â  Â  Â  Â  if (window.confirm(`Are you sure you want to delete order ${serialNumber}?`)) {
Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  await axios.delete(`${API_URL}/${id}`);
Â  Â  Â  Â  Â  Â  Â  Â  setOrders(prevOrders => prevOrders.filter(order => order._id !== id));
Â  Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  Â  Â  alert('Failed to delete the order.');
Â  Â  Â  Â  Â  Â  Â  Â  console.error('Delete error:', err);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const handleEditClick = (order) => {
Â  Â  Â  Â  setCurrentOrder(order);
Â  Â  Â  Â  setIsEditing(true);
Â  Â  };

Â  Â  const handleCloseModal = () => {
Â  Â  Â  Â  setIsEditing(false);
Â  Â  Â  Â  setCurrentOrder(null);
Â  Â  };

Â  Â  const handleRefresh = useCallback(() => {
Â  Â  Â  Â  fetchOrders();
Â  Â  }, [fetchOrders]);
Â  Â  
Â  Â  useEffect(() => {
Â  Â  Â  Â  const delaySearch = setTimeout(() => {
Â  Â  Â  Â  Â  Â  fetchOrders();
Â  Â  Â  Â  }, DEBOUNCE_DELAY); 

Â  Â  Â  Â  return () => clearTimeout(delaySearch); 
Â  Â  }, [filterOwner, searchTerm, fetchOrders]); 

Â  Â  if (loading) {
Â  Â  Â  Â  return <p className="status-message">Loading orders...</p>;
Â  Â  }
Â  Â  if (error) {
Â  Â  Â  Â  return <p className="status-message error-message">Error: {error}</p>;
Â  Â  }

Â  Â  return (
Â  Â  Â  Â  <div className="order-table-view">
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* onOrderAdded par list refresh hogi */}
Â  Â  Â  Â  Â  Â  <OrderForm onOrderAdded={handleRefresh} />

Â  Â  Â  Â  Â  Â  <h2 className="dashboard-heading">Order Tracking Dashboard</h2>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <div className="filter-search-container">
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <div className="input-group">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label>Search (Serial No.):</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Type Serial Number..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={searchTerm}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchTerm(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <div className="input-group">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label>Filter by Owner:</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filterOwner} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFilterOwner(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {ownerOptions.map(owner => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={owner} value={owner}>{owner}</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <p className="order-count">Total Orders: **{orders.length}**</p>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {orders.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  <p className="status-message">No orders found for the current selection.</p>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="table-wrapper">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <table className="order-table">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th>Serial No.</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th>Date</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th>Owner</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th>Status</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th>Actions</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {orders.map((order) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={order._id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>**{order.serialNumber}**</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{new Date(order.orderDate).toLocaleDateString()}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{order.owner}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className={`status-tag status-${order.deliveryStatus.toLowerCase().replace(/\s/g, '-')}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {order.deliveryStatus}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="action-btn edit-btn"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleEditClick(order)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Edit
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="action-btn delete-btn"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleDelete(order._id, order.serialNumber)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Delete
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {isEditing && currentOrder && (
Â  Â  Â  Â  Â  Â  Â  Â  <EditOrderModal 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  order={currentOrder}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClose={handleCloseModal}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onOrderUpdated={handleRefresh} 
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  </div>
Â  Â  );
}

export default OrderTable;